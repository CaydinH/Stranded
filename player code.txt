extends CharacterBody2D

#Global Variables
const SPEED = 150.0
const JUMP_VELOCITY = -250.0
var dmg_lock : float
var jump_lock : float

@export var stats = {
	"health": 140,
	"max_health": 140,
	"jumps": 2,
	"atk_dmg": 20,
}

#State Machine
enum States {IDLE, WALKING, JUMPING, FALLING, ATTACKING, SLIDING, DEAD}
var state = States.IDLE

func _ready() -> void:
	$laser_gun.visible = false

func _physics_process(delta: float) -> void:
	dmg_lock = max(dmg_lock-delta, 0.0)
	jump_lock = max(jump_lock-delta, 0.0)
	$player_HUD/ProgressBar.max_value = stats.max_health
	$player_HUD/ProgressBar.value = stats.health
	$player_HUD/Label.text = str(stats.health)


	if state != States.DEAD:
		if $RayCastRight.is_colliding() or $RayCastLeft.is_colliding():
			stats.jumps = 2
			$AnimatedSprite2D.play("walk_right")
			if Input.is_action_just_pressed("jump"):
				jump_lock = 0.25
				state = States.JUMPING
			if jump_lock == 0:
				velocity.y = 0.5
				$AnimatedSprite2D.flip_h = $RayCastLeft.is_colliding()

		if not is_on_floor():
			state = States.FALLING
			velocity += get_gravity() * delta
		else:
			stats.jumps = 2

		if Input.is_action_just_pressed("jump") and stats.jumps >= 1:
			velocity.y = JUMP_VELOCITY
			stats.jumps -= 1
			$AnimatedSprite2D.play("jump")

		var direction := Input.get_axis("walk_left", "walk_right")
		if Input.is_action_pressed("shift"):
			velocity.x = direction*SPEED*1.7
		elif direction:
			velocity.x = direction * SPEED
			$AnimatedSprite2D.play("walk_right")
			$AnimatedSprite2D.flip_h = direction < 0
		else:
			velocity.x = move_toward(velocity.x, 0, SPEED)
			$AnimatedSprite2D.play("idle")

		if Input.is_action_just_pressed("esc"):
			if not $menu.visible:
				$menu.visible = true
				get_tree().paused = true
			else:
				$menu.visible = false
				get_tree().paused = false
		print(state)
		move_and_slide()


func pickup_health(value):
	stats.health += value
	stats.health = clamp(stats.health, 0, stats.max_health)

func take_damage(dmg):
	stats.health -= dmg
	if stats.health <= 0:
		state = States.DEAD
		OS.alert("Dead")
		get_tree().reload_current_scene()
